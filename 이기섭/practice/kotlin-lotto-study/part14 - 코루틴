# 14장 코루틴

- 동시성과 병렬성의 개념
- 코틀린에서 동시서 ㅇ연산을 만드는 빌딩 블록인 일시 중단 함수
- 코틀린에서 코루틴을 활용해 동시성 프로그래밍에 접근하는 방법

## 14.1 동시성과 병렬성

동시성 : 여러 작업을 동시에 실행하는 것을 말하지만 물리적으로 함께 실행하는 것은 아님. 코드의 여러 부분을 돌아가며 실행하는 것.
병렬성 : 여러 작업을 여러 cpu코어에서 물리적으로 동시에 실행하는 것

## 14.2 코틀린의 동시성 처리 방법 : 일시 중단 함수와 코루틴

코루틴 : 코틀린의 강력한 특징으로 비동기적으로 실행되는 넌블로킹 동시성 코드를 우아하게 작성할 수 있게 해줌.
        전통적 스레드보다 훨씬 가볍게 동작하며, 구조화된 동시성을 통해 동시성 작업과 그 생명주기를 관리할 수 있음

## 14.3 스레드와 코루틴의 비교

스레드 
- jvm에서 병렬 프로그래밍과 동시성 프로그래밍을 위한 고전적 추상화
- 서로 독립적으로 동시에 실행되는 코드 블록을 지정할 수 있게 해줌.
- 운영체제가 관리하는 스레드로 생성 및 관리 비용 많이 듬
- 몇 천개 관리 가능
- 어떤 작업이 완료되길 기다리는 동안 블록
- 취소나 예외처리가 어려움

코틀린
- 일시 중단 가능한 계산
- 초경량 추상화, 일반적으로 노트북에서도 100000개 이상의 코루틴을 쉽게 실행 가능
- 시스템 자원을 블록시키지 않고 실행을 일시 중단 할 수 있고 중단 지점부터 재개 가능
- 구조화된 동시성이라는 개념을 통해 동시 작업의 구조와 계층을 확립
- 구조화된 동시성은 자식으로 시작된 다른 코루틴들도 함께 취소도되록 보장

코틀린과 프로젝트 룸
- 가상 스레드 형태의 경량 동시성을 도입해 jvm스레드와 운영체제 스레드 간의 비용이 많이 드는 일대일 결합을 해소하려는 노력
- jvm과도 분리되어 있어 다른 플랫폼에서 코틀린 코드를 실행할 때도 코루틴을 사용할 수 있음

## 14.4 잠시 멈출 수 있는 함수: 일시 중단 함수
### 14.4.1 일시 중단 함수를 사용한 코드는 순차적으로 보인다

여러 함수를 호출하는 블로킹 코드 작성하기
```kotlin
fun login(credentials: Credentials): UserID
fun loadUserData(userID: UserID): UserData
fun showData(data: UserData)

fun showUserInfo(credentials: Credentials) {
    val userID = login(credentials)
    val userData =loadUserData(userID)
    showData(userData)
}
```

일시 중단 함수를 사용해 같은 로직 수행하기
```kotlin
suspend fun login(credentials: Credentials): UserID
suspend fun loadUserData(userID: UserID): UserData
fun showData(data: UserData)

fun showUserInfo(credentials: Credentials) {
    val userID = login(credentials)
    val userData =loadUserData(userID)
    showData(userData)
}
```

suspend 변경자
- 함수가 실행을 잠시 멈출 수 있다는 의미
- 일시 중단 시 다른 코드가 같은 스레드에서 실행 가능

##14.5 코루틴을 다른 접근 방법과 비교
콜백을 써서 여러 함수를 연속적으로 호출하기
```kotlin
fun loginAsync(credentials: Credentials, callback: (UserID) -> Unit)
fun loadUserDataAsync(userID: userID, callback: (UserData) -> Unit)
fun showData(data: UserData)

fun showUserInfo(credentials: Credentials) {
    loginAsync(credentials) { userID ->
        loadUserDataAsync(userID) { userData ->
            showData(userData)
        }
    }
}
```
퓨처를 사용해 여러 함수를 연속적으로 호출하기
```kotlin
fun loginAsync(credentials: Credentials) : CompletableFuture<UserID>
fun loadUserDataAsync(userID: userID) : CompletableFuture<UserData>
fun showData(data: UserData)

fun showUserInfo(credentials: Credentials) {
    loginAsync(credentials)
            .thenCompose {loadUserDataAsync(it)}
            .thenAceept {showData(it)}
}
```

반응형 스르림을 사용해 같은 로직 구현하기
```kotlin
fun loginAsync(credentials: Credentials) : Single<UserID>
fun loadUserDataAsync(userID: userID) : Single<UserData>
fun showData(data: UserData)

fun showUserInfo(credentials: Credentials) {
        loginAsync(credentials)
                .flatMap { loadUserDataAsync(it) }
                .doOnSuccess { showData(it) }
                .subscribe()
}
```

### 14.5.1 일시 중단 함수 호출
- 아무 곳에서나 호출 불가
- 일시 중단할 수 있는 코드블록 안에서만 호출 가능

## 14.6 코루틴의 세계로 들어가기: 코루틴 빌더
- runBlocking 은 블로킹 코드와 일시 중단 함수의 세계를 연결할 때 쓰인다.
- launch는 값을 반환하지 않는 새로운 코루틴을 시작할 때 쓰인다.
- async는 비동기적으로 값을 계산할 때 쓰인다.

### 14.6.1 일반코드에서 코루틴의 세계로 : runBlocking 함수
runBlocking을 사용해 일시 중단 함수 실행하기
```kotlin
import kotlinx.coroutines.*
import kotlin.time.Duration.Companion.milliseconds

suspend fun doSomethingSlowly() {
    delay(500.miliseconds)
        println("i'm done")
}

fun main() =runblocking {
    doSomethingSlowly()
}
```

### 14.6.2 발사 후 망각 코루틴 생성: launch 함수
- launch함수 : 새로운 자식 코루틴을 시작하는 데 쓰인다.
- 발사 후 망각
- 일시 중단된 코루틴은 메모리에 저장되어 다시 실행가능
```kotlin
private var zeroTime = System.cureentTimeMills()
fun log(message: Any?) = 
    println("${System.cureentTimeMillis() - zeroTime}" + "[${Thread.cureentThread().name}] $message")
```

### 14.6.3 대기 가능한 연산: async 빌더
- Deffered 타입 -> Future, Proimise 와 동일 개녕
```kotlin
suspend fun slowlyAddNumbers(a: Int, b: Int): Int {
    log("Waiting a bit before calculating $a + $b")
        delay(100.milliseconds * a)
        return a + b
}

fun main() = runblocking {
    log("Starting the async computation")
    val myFirstDeferred = async { slowlyAddNumbers(2,2) }
    val mySecondDeferred = async { slowlyAddNumbers(4,4) }
    log("Waiting for the deffered value to be available")
    log("The first result: ${myFirstDeferred.await()}")
    log("The second result: ${mySecondDeferred.await()}")
}

```
